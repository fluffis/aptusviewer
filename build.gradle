plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'se.fluff.aptusviewer'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
/*
application {
    // mainModule = 'se.fluff.aptusviewer'
    mainClass = 'se.fluff.aptusviewer.AptusViewerApplication'
}
 */
mainClassName = 'se.fluff.aptusviewer.Launcher'

def javaFxVersion = '17.0.2'

javafx {
    version = javaFxVersion
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    //implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'

    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')

    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    // https://mvnrepository.com/artifact/commons-dbutils/commons-dbutils
    implementation 'commons-dbutils:commons-dbutils:1.8.0'


    implementation('com.microsoft.sqlserver:mssql-jdbc:12.4.0.jre11')

}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'se.fluff.aptusviewer.Launcher'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    }
}

test {
    useJUnitPlatform()
}

task signJar(dependsOn: 'jar', description: 'to Sign JAR.', group: 'Build') {
    doLast {
        println ":$project.name:${name}"
        def signdir  = new File("$buildDir/libs/signed")
        signdir.mkdirs()
        ant.signjar(
                destDir: "${signdir.absolutePath}",
                jar: "$buildDir/libs/*.jar",
                alias: project.keystoreAlias,
                storetype: "pkcs12",
                keystore: project.keystoreFile,
                storepass: project.keystorePassword,
                verbose: true,
                preservelastmodified: "true"
        )
    }
}

/*
jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}


 */